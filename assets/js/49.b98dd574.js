(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{594:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("以下是基于 PyTorch Geometric (PyG) 的链接预测 GNN 项目文件结构及每个文件的核心内容说明，结合你之前的实验需求整理：")]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"一、项目目录结构"}},[s._v("一、项目目录结构")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("myGNN_project/\n├── data/                # 数据处理相关\n│   ├── raw/            # 原始数据集（如Cora的nodes.csv, edges.csv）\n│   └── processed/      # 预处理后的数据（如data.pt）\n├── models/             # 模型定义\n│   ├── gnn.py          # GNN模型架构（如GraphSAGE）\n│   └── link_predictor.py # 链接预测头\n├── utils/              # 工具函数\n│   ├── dataset.py      # 数据加载与转换\n│   ├── metrics.py      # 评估指标（AUC, F1等）\n│   └── negative_sampling.py # 负采样方法\n├── configs/            # 配置文件\n│   └── config.yaml     # 超参数（隐藏层维度、学习率等）\n├── train.py            # 训练脚本\n├── test.py             # 测试脚本\n└── requirements.txt    # 依赖清单\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("hr"),s._v(" "),n("h3",{attrs:{id:"二、核心文件详解"}},[s._v("二、核心文件详解")]),s._v(" "),n("h4",{attrs:{id:"_1-data-processed-data-pt"}},[s._v("1. "),n("code",[s._v("data/processed/data.pt")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：存储预处理后的图数据对象（PyG的 "),n("code",[s._v("Data")]),s._v("类）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# data/processed/data.py\nimport torch\nfrom torch_geometric.data import Data\n\n# 加载原始数据（假设nodes.csv含节点特征，edges.csv含边信息）\nnode_features = torch.load('nodes.pt')  # [num_nodes, num_features]\nedge_index = torch.load('edges.pt')     # [2, num_edges]\nedge_label = torch.load('labels.pt')    # [num_edges] (0/1表示是否存在边)\n\n# 划分训练/验证/测试集\ntrain_mask = torch.load('train_mask.pt')  # [num_edges]\nval_mask = torch.load('val_mask.pt')\ntest_mask = torch.load('test_mask.pt')\n\n# 保存为PyG的Data对象\ndata = Data(\n    x=node_features,\n    edge_index=edge_index,\n    edge_label=edge_label,\n    train_mask=train_mask,\n    val_mask=val_mask,\n    test_mask=test_mask\n)\ntorch.save(data, 'processed_data.pt')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_2-models-gnn-py"}},[s._v("2. "),n("code",[s._v("models/gnn.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：定义图神经网络模型（如GraphSAGE）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import torch\nimport torch.nn.functional as F\nfrom torch_geometric.nn import SAGEConv\n\nclass GNN(torch.nn.Module):\n    def __init__(self, in_channels, hidden_channels, out_channels):\n        super().__init__()\n        self.conv1 = SAGEConv(in_channels, hidden_channels)\n        self.conv2 = SAGEConv(hidden_channels, out_channels)\n\n    def forward(self, x, edge_index):\n        x = self.conv1(x, edge_index)\n        x = F.relu(x)\n        x = F.dropout(x, p=0.5, training=self.training)\n        x = self.conv2(x, edge_index)\n        return x\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_3-models-link-predictor-py"}},[s._v("3. "),n("code",[s._v("models/link_predictor.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：定义链接预测头（将节点嵌入映射为边概率）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import torch\nimport torch.nn as nn\n\nclass LinkPredictor(nn.Module):\n    def __init__(self, hidden_channels):\n        super().__init__()\n        self.lin = nn.Linear(hidden_channels * 2, 1)  # 双节点特征拼接\n\n    def forward(self, z, edge_index, edge_label_index):\n        # 获取正负样本的节点嵌入\n        src, dst = edge_label_index\n        z_src = z[src]\n        z_dst = z[dst]\n\n        # 计算得分（内积 + Sigmoid）\n        out = self.lin(torch.cat([z_src, z_dst], dim=-1))\n        return torch.sigmoid(out)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_4-utils-dataset-py"}},[s._v("4. "),n("code",[s._v("utils/dataset.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：数据加载与转换（支持链接分割）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from torch_geometric.datasets import Planetoid\nfrom torch_geometric.transforms import RandomLinkSplit\n\ndef load_data():\n    # 加载Cora数据集\n    dataset = Planetoid(root='data/Cora', name='Cora')\n    data = dataset[0]\n\n    # 链接分割\n    splitter = RandomLinkSplit(num_val=0.1, num_test=0.1)\n    train_data, val_data, test_data = splitter(data)\n\n    return train_data, val_data, test_data\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_5-utils-negative-sampling-py"}},[s._v("5. "),n("code",[s._v("utils/negative_sampling.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：生成负样本（假边）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import torch\nfrom torch_geometric.utils import negative_sampling\n\ndef generate_neg_samples(data, num_neg_samples=1000):\n    # 为训练集生成负样本\n    neg_edges = negative_sampling(\n        edge_index=data.edge_index,\n        num_nodes=data.num_nodes,\n        num_neg_samples=num_neg_samples\n    )\n    return neg_edges\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_6-utils-metrics-py"}},[s._v("6. "),n("code",[s._v("utils/metrics.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：计算评估指标（AUC, F1等）")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v("​：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from sklearn.metrics import roc_auc_score, f1_score\n\ndef evaluate(model, data, neg_edges):\n    model.eval()\n    with torch.no_grad():\n        # 正样本得分\n        pos_scores = model(data.z, data.edge_index, data.edge_index)\n        # 负样本得分\n        neg_scores = model(data.z, data.edge_index, neg_edges)\n\n        # 计算AUC\n        labels = torch.cat([torch.ones(pos_scores.size(0)), \n                           torch.zeros(neg_scores.size(0))])\n        scores = torch.cat([pos_scores, neg_scores])\n        auc = roc_auc_score(labels.numpy(), scores.numpy())\n\n        return {'auc': auc}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h4",{attrs:{id:"_7-train-py"}},[s._v("7. "),n("code",[s._v("train.py")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("​"),n("strong",[s._v("作用")]),s._v("​：训练主程序")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("内容示例")]),s._v(":")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import torch\nfrom models.gnn import GNN\nfrom models.link_predictor import LinkPredictor\nfrom utils.dataset import load_data\nfrom utils.metrics import evaluate\n\ndef main():\n    # 加载数据\n    train_data, val_data, test_data = load_data()\n\n    # 初始化模型\n    gnn = GNN(in_channels=dataset.num_node_features, \n              hidden_channels=64, \n              out_channels=32)\n    predictor = LinkPredictor(hidden_channels=32)\n    optimizer = torch.optim.Adam(list(gnn.parameters()) + list(predictor.parameters()), lr=0.01)\n\n    # 训练循环\n    for epoch in range(200):\n        gnn.train()\n        predictor.train()\n        optimizer.zero_grad()\n\n        # 前向传播\n        z = gnn(train_data.x, train_data.edge_index)\n        pos_scores = predictor(z, train_data.edge_index, train_data.edge_index)\n        neg_edges = generate_neg_samples(train_data)\n        neg_scores = predictor(z, train_data.edge_index, neg_edges)\n\n        # 计算损失\n        labels = torch.cat([torch.ones(pos_scores.size(0)), \n                           torch.zeros(neg_scores.size(0))])\n        scores = torch.cat([pos_scores, neg_scores])\n        loss = F.binary_cross_entropy(scores, labels)\n\n        loss.backward()\n        optimizer.step()\n\n        # 验证\n        if epoch % 10 == 0:\n            val_metrics = evaluate(gnn, val_data, generate_neg_samples(val_data))\n            print(f"Epoch {epoch}: Val AUC={val_metrics[\'auc\']:.4f}")\n\nif __name__ == "__main__":\n    main()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])])])]),s._v(" "),n("hr"),s._v(" "),n("h3",{attrs:{id:"三、扩展建议"}},[s._v("三、扩展建议")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("​"),n("strong",[s._v("配置文件")]),s._v("​：将超参数（如隐藏层维度、学习率）提取到 "),n("code",[s._v("configs/config.yaml")]),s._v("，通过 "),n("code",[s._v("yaml.safe_load()")]),s._v("加载。")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("日志记录")]),s._v("​：添加 TensorBoard 或 WandB 日志记录训练过程。")])]),s._v(" "),n("li",[n("p",[s._v("​"),n("strong",[s._v("多任务支持")]),s._v("​：在 "),n("code",[s._v("link_predictor.py")]),s._v("中扩展联合节点分类和链接预测的功能。")])])]),s._v(" "),n("p",[s._v("通过此结构，你可以系统化地实现可复现的链接预测实验。")])])}),[],!1,null,null,null);n.default=t.exports}}]);