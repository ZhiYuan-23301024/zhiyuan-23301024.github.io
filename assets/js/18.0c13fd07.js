(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{456:function(t,s,a){t.exports=a.p+"assets/img/25081201.da24eed4.png"},457:function(t,s,a){t.exports=a.p+"assets/img/25081203.4a108390.png"},458:function(t,s,a){t.exports=a.p+"assets/img/25081204.8ad9d9aa.png"},577:function(t,s,a){"use strict";a.r(s);var n=a(2),v=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("之前练习算法的时候，使用的递归树过深，控制台出现了一个报错")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('Exception in thread "main" java.lang.StackOverflowError\n    at RecursionDemo.infiniteRecursion(RecursionDemo.java:3)\n    at RecursionDemo.infiniteRecursion(RecursionDemo.java:3)\n    at RecursionDemo.infiniteRecursion(RecursionDemo.java:3)\n    ...\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("就想着借这个机会复习一下JVM，然后解释一下为什么递归树过深会导致栈溢出")]),t._v(" "),s("p",[t._v("参考文献")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/Delilah_java/article/details/119778422",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇JVM详细图解，坚持看完！带你真正搞懂Java虚拟机！_jvm图解-CSDN博客"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://developer.aliyun.com/article/1449769",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM内存模型和结构详解(五大模型图解)-阿里云开发者社区"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"jvm"}},[t._v("JVM")]),t._v(" "),s("p",[t._v("JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、 一个垃圾回收，堆和 一个存储方法域。"),s("strong",[t._v("JVM 是运行在操作系统之上的，它与硬件没有直接的交互")])]),t._v(" "),s("p",[s("strong",[t._v("也是个软件？并非我所想的底层？但对java来说很底层了")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(456),alt:""}})]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"方法区"}},[t._v("方法区")]),t._v(" "),s("p",[t._v("主要存储"),s("strong",[t._v("类的结构信息")]),t._v("，如类的字段信息、方法信息、构造方法信息等。")]),t._v(" "),s("p",[s("strong",[t._v("运行时常量池")]),t._v("，用于存储编译期生成的各种字面量和符号引用。")]),t._v(" "),s("h3",{attrs:{id:"堆-heap"}},[t._v("堆（Heap）")]),t._v(" "),s("p",[t._v("即运行时数据区，是被"),s("strong",[t._v("线程共享的一块内存区域")]),t._v("，创建的"),s("strong",[t._v("对象和数组都保存在 Java 堆内存中")]),t._v("，也是"),s("strong",[t._v("垃圾收集器")]),t._v("进行 垃圾收集的最重要的内存区域。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(457),alt:""}}),t._v("\n堆空间用于存储"),s("strong",[t._v("对象实例")]),t._v("，包括程序中创建的对象以及 Java 虚拟机自动创建的对象。")]),t._v(" "),s("h3",{attrs:{id:"栈-stack"}},[t._v("栈（Stack）")]),t._v(" "),s("p",[s("img",{attrs:{src:a(458),alt:""}})]),t._v(" "),s("p",[t._v("存储"),s("strong",[t._v("局部变量")]),t._v("、"),s("strong",[t._v("操作数栈")]),t._v("、"),s("strong",[t._v("方法出口")]),t._v("等信息。")]),t._v(" "),s("p",[s("strong",[t._v("每个线程都有一个私有的栈")]),t._v("，用于存储方法的"),s("strong",[t._v("局部变量")]),t._v("和"),s("strong",[t._v("部分结果")]),t._v("。")]),t._v(" "),s("p",[t._v("每个方法在执行的同时都会创建一个**栈帧（Stack Frame）**用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")]),t._v(" "),s("p",[t._v("栈帧（Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接（Dynamic Linking）、 方法返回值和异常分派（Dispatch Exception）。栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。")]),t._v(" "),s("h3",{attrs:{id:"本地方法栈-native-method-stack"}},[t._v("本地方法栈（Native Method  Stack）")]),t._v(" "),s("p",[t._v("与栈类似，用于存储执行本地（native）方法的数据。")]),t._v(" "),s("p",[t._v("本地方法栈（Native Method Stack）是Java虚拟机（JVM）内存模型中的一部分，用于支持本地方法的调用。"),s("strong",[t._v("本地方法指的是用非Java语言（如C、C++）编写的，通过Java Native Interface（JNI）在Java程序中调用的方法")]),t._v("。\n在Java程序中，当需要调用本地方法时，JVM会创建一个本地方法栈，用于执行本地方法的操作。与虚拟机栈类似，"),s("strong",[t._v("本地方法栈也是线程私有的")]),t._v("，每个线程都有自己的本地方法栈")]),t._v(" "),s("h3",{attrs:{id:"程序计数器-program-counter-register"}},[t._v("程序计数器（Program Counter Register）")]),t._v(" "),s("p",[t._v("每个线程都有一个程序计数器，用于"),s("strong",[t._v("存储当前线程正在执行的指令的地址")]),t._v("。")]),t._v(" "),s("p",[t._v("线程切换时，"),s("strong",[t._v("程序计数器也会切换到相应线程的执行地址")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"那么为何递归树深度过大导致栈溢出-这个深度具体是多少"}},[t._v("那么为何递归树深度过大导致栈溢出，这个深度具体是多少")]),t._v(" "),s("h3",{attrs:{id:"为什么递归深度过大会导致栈溢出"}},[s("strong",[t._v("为什么递归深度过大会导致栈溢出？")])]),t._v(" "),s("p",[t._v("递归调用会在 "),s("strong",[t._v("JVM 栈（Stack）")]),t._v(" 上不断压入新的 "),s("strong",[t._v("栈帧（Stack Frame）")])]),t._v(" "),s("p",[t._v("而 "),s("strong",[t._v("栈内存是有限的")]),t._v("（默认约 "),s("code",[t._v("1MB")]),t._v("），当递归深度过大时，栈空间耗尽，就会抛出 "),s("strong",[s("code",[t._v("StackOverflowError")])]),t._v("。")]),t._v(" "),s("p",[t._v("而递归深度没有固定值，它取决于以下几点：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("JVM 栈大小（"),s("code",[t._v("-Xss")]),t._v(" 参数）")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("默认值：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Linux/macOS")]),t._v(": "),s("code",[t._v("1MB")])]),t._v(" "),s("li",[s("strong",[t._v("Windows（64-bit JVM）")]),t._v(": "),s("code",[t._v("1MB")])]),t._v(" "),s("li",[s("strong",[t._v("Windows（32-bit JVM）")]),t._v(": "),s("code",[t._v("320KB")])])])]),t._v(" "),s("li",[s("p",[t._v("可以通过 "),s("code",[t._v("-Xss")]),t._v(" 调整：")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("java")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-Xss2M")]),t._v(" Main  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置栈大小为 2MB")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("栈越大，支持的递归深度越深")]),t._v("。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("每个栈帧的大小")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("方法参数越多、局部变量越多，栈帧越大，递归深度越小")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3 个参数，栈帧较大")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3 个局部变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每次调用占用更多栈空间")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("比下面的方法递归深度更小：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("simpleRecursive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参数，无局部变量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("simpleRecursive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 栈帧较小")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("JVM 实现")])]),t._v(" "),s("ul",[s("li",[t._v("HotSpot JVM、OpenJ9、GraalVM 可能有不同的默认栈大小。")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"递归深度的估算"}},[s("strong",[t._v("递归深度的估算")])]),t._v(" "),s("p",[t._v("约1000到2000层但实际情况可能更小，因为：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("JVM 本身占用部分栈空间")]),t._v("（如 "),s("code",[t._v("main()")]),t._v(" 方法的栈帧）")]),t._v(" "),s("li",[s("strong",[t._v("某些方法栈帧可能更大")]),t._v("（如包含大数组局部变量）")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"如何避免递归栈溢出"}},[s("strong",[t._v("如何避免递归栈溢出？")])]),t._v(" "),s("p",[t._v("算法这块，改用循环代替递归？少用点局部变量，用滚动数组的方式代替局部变量？")])])}),[],!1,null,null,null);s.default=v.exports}}]);